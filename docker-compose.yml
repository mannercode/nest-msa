# https://docs.docker.com/compose/compose-file/05-services/
x-mongo-image: &mongo-image mongo:8.0
x-redis-image: &redis-image redis:7.4
x-logging: &default-logging
    options:
        max-size: '10m'
        max-file: '3'

x-mongo-common: &mongo-common
    image: *mongo-image
    profiles: ['infra']
    logging: *default-logging
    environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USERNAME}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
    command: 'mongod --replSet ${MONGO_DB_REPLICA_NAME} --keyFile /etc/mongodb/mongodb.key --bind_ip_all'
    volumes:
        - mongodb_key:/etc/mongodb
    networks:
        - default
    restart: always
    depends_on:
        - mongo-key-generator
    healthcheck:
        test:
            [
                'CMD',
                'mongosh',
                '--quiet',
                '-u',
                '$MONGO_DB_USERNAME',
                '-p',
                $MONGO_DB_PASSWORD,
                '--authenticationDatabase',
                'admin',
                '--eval',
                'db.version()'
            ]
        interval: 5s
        timeout: 10s
        retries: 5

x-redis-common: &redis-common
    image: *redis-image
    command:
        [
            'redis-server',
            '--port',
            $REDIS_PORT,
            '--cluster-enabled',
            'yes',
            '--cluster-config-file',
            'nodes.conf',
            '--cluster-node-timeout',
            '5000',
            '--appendonly',
            'yes'
        ]
    profiles: ['infra']
    logging: *default-logging
    networks:
        - default
    restart: always
    healthcheck:
        test: ['CMD', 'redis-cli', 'ping']
        interval: 5s
        timeout: 5s
        retries: 5

services:
    redis1:
        <<: *redis-common
        container_name: ${REDIS_HOST1}
    redis2:
        <<: *redis-common
        container_name: ${REDIS_HOST2}
    redis3:
        <<: *redis-common
        container_name: ${REDIS_HOST3}
    redis4:
        <<: *redis-common
        container_name: ${REDIS_HOST4}
    redis5:
        <<: *redis-common
        container_name: ${REDIS_HOST5}
    redis6:
        <<: *redis-common
        container_name: ${REDIS_HOST6}
    redis_cluster_setup:
        image: *redis-image
        container_name: redis-cluster-setup
        profiles: ['infra']
        depends_on:
            redis1:
                condition: service_healthy
            redis2:
                condition: service_healthy
            redis3:
                condition: service_healthy
            redis4:
                condition: service_healthy
            redis5:
                condition: service_healthy
            redis6:
                condition: service_healthy
        command: >
            sh -c "echo 'yes' | redis-cli --cluster create
            redis1:$REDIS_PORT
            redis2:$REDIS_PORT
            redis3:$REDIS_PORT
            redis4:$REDIS_PORT
            redis5:$REDIS_PORT
            redis6:$REDIS_PORT
            --cluster-replicas 1"
        networks:
            - default

    mongo-key-generator:
        image: *mongo-image
        container_name: mongo-key-generator
        command: sh -c "openssl rand -base64 768 > mongodb.key && chmod 400 mongodb.key && chown mongodb:mongodb mongodb.key"
        volumes:
            - mongodb_key:/mongodb_key
        working_dir: /mongodb_key
    mongo1:
        <<: *mongo-common
        container_name: ${MONGO_DB_HOST1}
    mongo2:
        <<: *mongo-common
        container_name: ${MONGO_DB_HOST2}
    mongo3:
        <<: *mongo-common
        container_name: ${MONGO_DB_HOST3}
    mongo_cluster_setup:
        image: *mongo-image
        container_name: mongo-cluster-setup
        profiles: ['infra']
        depends_on:
            mongo1:
                condition: service_healthy
            mongo2:
                condition: service_healthy
            mongo3:
                condition: service_healthy
        command: >
            sh -c "mongosh --host ${MONGO_DB_HOST1} --port ${MONGO_DB_PORT} -u ${MONGO_DB_USERNAME} -p ${MONGO_DB_PASSWORD} --authenticationDatabase admin --eval
            \"rs.initiate({
                _id: \\\"${MONGO_DB_REPLICA_NAME}\\\",
                members: [
                    {_id: 0, host: \\\"${MONGO_DB_HOST1}\\\"},
                    {_id: 1, host: \\\"${MONGO_DB_HOST2}\\\"},
                    {_id: 2, host: \\\"${MONGO_DB_HOST3}\\\"}
                ]
            })\"
            "
        networks:
            - default

    app:
        image: $PROJECT_NAME
        build: .
        profiles: ['apps']
        container_name: $PROJECT_NAME
        logging: *default-logging
        environment:
            - NODE_ENV=production
        env_file: .env.test
        volumes:
            - ./_output/logs:/app/_output/logs
            - ./_output/uploads:/app/_output/uploads
        networks:
            - default

networks:
    default:
        external: true
        name: ${PROJECT_NAME}

volumes:
    mongodb_key:
